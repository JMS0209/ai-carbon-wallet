/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PaymentProcessorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "owner"
      | "payments"
      | "purchaseOffset"
      | "renounceOwnership"
      | "transferOwnership"
      | "usdc"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OffsetPurchased"
      | "OffsetRetired"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payments", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "purchaseOffset",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
}

export namespace OffsetPurchasedEvent {
  export type InputTuple = [
    paymentId: BytesLike,
    payer: AddressLike,
    amount: BigNumberish,
    carbonCredits: BigNumberish,
    jobId: string
  ];
  export type OutputTuple = [
    paymentId: string,
    payer: string,
    amount: bigint,
    carbonCredits: bigint,
    jobId: string
  ];
  export interface OutputObject {
    paymentId: string;
    payer: string;
    amount: bigint;
    carbonCredits: bigint;
    jobId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OffsetRetiredEvent {
  export type InputTuple = [
    paymentId: BytesLike,
    carbonCredits: BigNumberish,
    jobId: string
  ];
  export type OutputTuple = [
    paymentId: string,
    carbonCredits: bigint,
    jobId: string
  ];
  export interface OutputObject {
    paymentId: string;
    carbonCredits: bigint;
    jobId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentProcessor extends BaseContract {
  connect(runner?: ContractRunner | null): PaymentProcessor;
  waitForDeployment(): Promise<this>;

  interface: PaymentProcessorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  payments: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, string, boolean] & {
        payer: string;
        amount: bigint;
        carbonCredits: bigint;
        timestamp: bigint;
        jobId: string;
        retired: boolean;
      }
    ],
    "view"
  >;

  purchaseOffset: TypedContractMethod<
    [amount: BigNumberish, carbonCredits: BigNumberish, jobId: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdc: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payments"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, string, boolean] & {
        payer: string;
        amount: bigint;
        carbonCredits: bigint;
        timestamp: bigint;
        jobId: string;
        retired: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchaseOffset"
  ): TypedContractMethod<
    [amount: BigNumberish, carbonCredits: BigNumberish, jobId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OffsetPurchased"
  ): TypedContractEvent<
    OffsetPurchasedEvent.InputTuple,
    OffsetPurchasedEvent.OutputTuple,
    OffsetPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "OffsetRetired"
  ): TypedContractEvent<
    OffsetRetiredEvent.InputTuple,
    OffsetRetiredEvent.OutputTuple,
    OffsetRetiredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OffsetPurchased(bytes32,address,uint256,uint256,string)": TypedContractEvent<
      OffsetPurchasedEvent.InputTuple,
      OffsetPurchasedEvent.OutputTuple,
      OffsetPurchasedEvent.OutputObject
    >;
    OffsetPurchased: TypedContractEvent<
      OffsetPurchasedEvent.InputTuple,
      OffsetPurchasedEvent.OutputTuple,
      OffsetPurchasedEvent.OutputObject
    >;

    "OffsetRetired(bytes32,uint256,string)": TypedContractEvent<
      OffsetRetiredEvent.InputTuple,
      OffsetRetiredEvent.OutputTuple,
      OffsetRetiredEvent.OutputObject
    >;
    OffsetRetired: TypedContractEvent<
      OffsetRetiredEvent.InputTuple,
      OffsetRetiredEvent.OutputTuple,
      OffsetRetiredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
