/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface OracleReceiverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getLatestData"
      | "lastUpdateTimestamp"
      | "latestOracleData"
      | "trustedSigner"
      | "updateOracleData"
      | "updateTrustedSigner"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OracleDataUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "getLatestData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestOracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateOracleData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTrustedSigner",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLatestData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestOracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTrustedSigner",
    data: BytesLike
  ): Result;
}

export namespace OracleDataUpdatedEvent {
  export type InputTuple = [
    data: string,
    timestamp: BigNumberish,
    updatedBy: AddressLike
  ];
  export type OutputTuple = [
    data: string,
    timestamp: bigint,
    updatedBy: string
  ];
  export interface OutputObject {
    data: string;
    timestamp: bigint;
    updatedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OracleReceiver extends BaseContract {
  connect(runner?: ContractRunner | null): OracleReceiver;
  waitForDeployment(): Promise<this>;

  interface: OracleReceiverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getLatestData: TypedContractMethod<[], [string], "view">;

  lastUpdateTimestamp: TypedContractMethod<[], [bigint], "view">;

  latestOracleData: TypedContractMethod<[], [string], "view">;

  trustedSigner: TypedContractMethod<[], [string], "view">;

  updateOracleData: TypedContractMethod<[data: string], [void], "nonpayable">;

  updateTrustedSigner: TypedContractMethod<
    [newSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getLatestData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastUpdateTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestOracleData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "trustedSigner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateOracleData"
  ): TypedContractMethod<[data: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTrustedSigner"
  ): TypedContractMethod<[newSigner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OracleDataUpdated"
  ): TypedContractEvent<
    OracleDataUpdatedEvent.InputTuple,
    OracleDataUpdatedEvent.OutputTuple,
    OracleDataUpdatedEvent.OutputObject
  >;

  filters: {
    "OracleDataUpdated(string,uint256,address)": TypedContractEvent<
      OracleDataUpdatedEvent.InputTuple,
      OracleDataUpdatedEvent.OutputTuple,
      OracleDataUpdatedEvent.OutputObject
    >;
    OracleDataUpdated: TypedContractEvent<
      OracleDataUpdatedEvent.InputTuple,
      OracleDataUpdatedEvent.OutputTuple,
      OracleDataUpdatedEvent.OutputObject
    >;
  };
}
